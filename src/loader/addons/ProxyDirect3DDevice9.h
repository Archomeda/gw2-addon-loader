#pragma once
#include <d3d9.h>

namespace loader {
    namespace addons {

        namespace d3d9_types {
            typedef HRESULT(QueryInterface_t)(REFIID riid, void** ppvObj);
            typedef ULONG(AddRef_t)();
            typedef ULONG(Release_t)();
            typedef HRESULT(TestCooperativeLevel_t)();
            typedef UINT(GetAvailableTextureMem_t)();
            typedef HRESULT(EvictManagedResources_t)();
            typedef HRESULT(GetDirect3D_t)(IDirect3D9** ppD3D9);
            typedef HRESULT(GetDeviceCaps_t)(D3DCAPS9* pCaps);
            typedef HRESULT(GetDisplayMode_t)(UINT iSwapChain, D3DDISPLAYMODE* pMode);
            typedef HRESULT(GetCreationParameters_t)(D3DDEVICE_CREATION_PARAMETERS *pParameters);
            typedef HRESULT(SetCursorProperties_t)(UINT XHotSpot, UINT YHotSpot, IDirect3DSurface9* pCursorBitmap);
            typedef void(SetCursorPosition_t)(int X, int Y, DWORD Flags);
            typedef BOOL(ShowCursor_t)(BOOL bShow);
            typedef HRESULT(CreateAdditionalSwapChain_t)(D3DPRESENT_PARAMETERS* pPresentationParameters, IDirect3DSwapChain9** pSwapChain);
            typedef HRESULT(GetSwapChain_t)(UINT iSwapChain, IDirect3DSwapChain9** pSwapChain);
            typedef UINT(GetNumberOfSwapChains_t)();
            typedef HRESULT(Reset_t)(D3DPRESENT_PARAMETERS* pPresentationParameters);
            typedef HRESULT(Present_t)(CONST RECT* pSourceRect, CONST RECT* pDestRect, HWND hDestWindowOverride, CONST RGNDATA* pDirtyRegion);
            typedef HRESULT(GetBackBuffer_t)(UINT iSwapChain, UINT iBackBuffer, D3DBACKBUFFER_TYPE Type, IDirect3DSurface9** ppBackBuffer);
            typedef HRESULT(GetRasterStatus_t)(UINT iSwapChain, D3DRASTER_STATUS* pRasterStatus);
            typedef HRESULT(SetDialogBoxMode_t)(BOOL bEnableDialogs);
            typedef void(SetGammaRamp_t)(UINT iSwapChain, DWORD Flags, CONST D3DGAMMARAMP* pRamp);
            typedef void(GetGammaRamp_t)(UINT iSwapChain, D3DGAMMARAMP* pRamp);
            typedef HRESULT(CreateTexture_t)(UINT Width, UINT Height, UINT Levels, DWORD Usage, D3DFORMAT Format, D3DPOOL Pool, IDirect3DTexture9** ppTexture, HANDLE* pSharedHandle);
            typedef HRESULT(CreateVolumeTexture_t)(UINT Width, UINT Height, UINT Depth, UINT Levels, DWORD Usage, D3DFORMAT Format, D3DPOOL Pool, IDirect3DVolumeTexture9** ppVolumeTexture, HANDLE* pSharedHandle);
            typedef HRESULT(CreateCubeTexture_t)(UINT EdgeLength, UINT Levels, DWORD Usage, D3DFORMAT Format, D3DPOOL Pool, IDirect3DCubeTexture9** ppCubeTexture, HANDLE* pSharedHandle);
            typedef HRESULT(CreateVertexBuffer_t)(UINT Length, DWORD Usage, DWORD FVF, D3DPOOL Pool, IDirect3DVertexBuffer9** ppVertexBuffer, HANDLE* pSharedHandle);
            typedef HRESULT(CreateIndexBuffer_t)(UINT Length, DWORD Usage, D3DFORMAT Format, D3DPOOL Pool, IDirect3DIndexBuffer9** ppIndexBuffer, HANDLE* pSharedHandle);
            typedef HRESULT(CreateRenderTarget_t)(UINT Width, UINT Height, D3DFORMAT Format, D3DMULTISAMPLE_TYPE MultiSample, DWORD MultisampleQuality, BOOL Lockable, IDirect3DSurface9** ppSurface, HANDLE* pSharedHandle);
            typedef HRESULT(CreateDepthStencilSurface_t)(UINT Width, UINT Height, D3DFORMAT Format, D3DMULTISAMPLE_TYPE MultiSample, DWORD MultisampleQuality, BOOL Discard, IDirect3DSurface9** ppSurface, HANDLE* pSharedHandle);
            typedef HRESULT(UpdateSurface_t)(IDirect3DSurface9* pSourceSurface, CONST RECT* pSourceRect, IDirect3DSurface9* pDestinationSurface, CONST POINT* pDestPoint);
            typedef HRESULT(UpdateTexture_t)(IDirect3DBaseTexture9* pSourceTexture, IDirect3DBaseTexture9* pDestinationTexture);
            typedef HRESULT(GetRenderTargetData_t)(IDirect3DSurface9* pRenderTarget, IDirect3DSurface9* pDestSurface);
            typedef HRESULT(GetFrontBufferData_t)(UINT iSwapChain, IDirect3DSurface9* pDestSurface);
            typedef HRESULT(StretchRect_t)(IDirect3DSurface9* pSourceSurface, CONST RECT* pSourceRect, IDirect3DSurface9* pDestSurface, CONST RECT* pDestRect, D3DTEXTUREFILTERTYPE Filter);
            typedef HRESULT(ColorFill_t)(IDirect3DSurface9* pSurface, CONST RECT* pRect, D3DCOLOR color);
            typedef HRESULT(CreateOffscreenPlainSurface_t)(UINT Width, UINT Height, D3DFORMAT Format, D3DPOOL Pool, IDirect3DSurface9** ppSurface, HANDLE* pSharedHandle);
            typedef HRESULT(SetRenderTarget_t)(DWORD RenderTargetIndex, IDirect3DSurface9* pRenderTarget);
            typedef HRESULT(GetRenderTarget_t)(DWORD RenderTargetIndex, IDirect3DSurface9** ppRenderTarget);
            typedef HRESULT(SetDepthStencilSurface_t)(IDirect3DSurface9* pNewZStencil);
            typedef HRESULT(GetDepthStencilSurface_t)(IDirect3DSurface9** ppZStencilSurface);
            typedef HRESULT(BeginScene_t)();
            typedef HRESULT(EndScene_t)();
            typedef HRESULT(Clear_t)(DWORD Count, CONST D3DRECT* pRects, DWORD Flags, D3DCOLOR Color, float Z, DWORD Stencil);
            typedef HRESULT(SetTransform_t)(D3DTRANSFORMSTATETYPE State, CONST D3DMATRIX* pMatrix);
            typedef HRESULT(GetTransform_t)(D3DTRANSFORMSTATETYPE State, D3DMATRIX* pMatrix);
            typedef HRESULT(MultiplyTransform_t)(D3DTRANSFORMSTATETYPE State, CONST D3DMATRIX* pMatrix);
            typedef HRESULT(SetViewport_t)(CONST D3DVIEWPORT9* pViewport);
            typedef HRESULT(GetViewport_t)(D3DVIEWPORT9* pViewport);
            typedef HRESULT(SetMaterial_t)(CONST D3DMATERIAL9* pMaterial);
            typedef HRESULT(GetMaterial_t)(D3DMATERIAL9* pMaterial);
            typedef HRESULT(SetLight_t)(DWORD Index, CONST D3DLIGHT9* pLight);
            typedef HRESULT(GetLight_t)(DWORD Index, D3DLIGHT9* pLight);
            typedef HRESULT(LightEnable_t)(DWORD Index, BOOL Enable);
            typedef HRESULT(GetLightEnable_t)(DWORD Index, BOOL* pEnable);
            typedef HRESULT(SetClipPlane_t)(DWORD Index, CONST float* pPlane);
            typedef HRESULT(GetClipPlane_t)(DWORD Index, float* pPlane);
            typedef HRESULT(SetRenderState_t)(D3DRENDERSTATETYPE State, DWORD Value);
            typedef HRESULT(GetRenderState_t)(D3DRENDERSTATETYPE State, DWORD* pValue);
            typedef HRESULT(CreateStateBlock_t)(D3DSTATEBLOCKTYPE Type, IDirect3DStateBlock9** ppSB);
            typedef HRESULT(BeginStateBlock_t)();
            typedef HRESULT(EndStateBlock_t)(IDirect3DStateBlock9** ppSB);
            typedef HRESULT(SetClipStatus_t)(CONST D3DCLIPSTATUS9* pClipStatus);
            typedef HRESULT(GetClipStatus_t)(D3DCLIPSTATUS9* pClipStatus);
            typedef HRESULT(GetTexture_t)(DWORD Stage, IDirect3DBaseTexture9** ppTexture);
            typedef HRESULT(SetTexture_t)(DWORD Stage, IDirect3DBaseTexture9* pTexture);
            typedef HRESULT(GetTextureStageState_t)(DWORD Stage, D3DTEXTURESTAGESTATETYPE Type, DWORD* pValue);
            typedef HRESULT(SetTextureStageState_t)(DWORD Stage, D3DTEXTURESTAGESTATETYPE Type, DWORD Value);
            typedef HRESULT(GetSamplerState_t)(DWORD Sampler, D3DSAMPLERSTATETYPE Type, DWORD* pValue);
            typedef HRESULT(SetSamplerState_t)(DWORD Sampler, D3DSAMPLERSTATETYPE Type, DWORD Value);
            typedef HRESULT(ValidateDevice_t)(DWORD* pNumPasses);
            typedef HRESULT(SetPaletteEntries_t)(UINT PaletteNumber, CONST PALETTEENTRY* pEntries);
            typedef HRESULT(GetPaletteEntries_t)(UINT PaletteNumber, PALETTEENTRY* pEntries);
            typedef HRESULT(SetCurrentTexturePalette_t)(UINT PaletteNumber);
            typedef HRESULT(GetCurrentTexturePalette_t)(UINT *PaletteNumber);
            typedef HRESULT(SetScissorRect_t)(CONST RECT* pRect);
            typedef HRESULT(GetScissorRect_t)(RECT* pRect);
            typedef HRESULT(SetSoftwareVertexProcessing_t)(BOOL bSoftware);
            typedef BOOL(GetSoftwareVertexProcessing_t)();
            typedef HRESULT(SetNPatchMode_t)(float nSegments);
            typedef float(GetNPatchMode_t)();
            typedef HRESULT(DrawPrimitive_t)(D3DPRIMITIVETYPE PrimitiveType, UINT StartVertex, UINT PrimitiveCount);
            typedef HRESULT(DrawIndexedPrimitive_t)(D3DPRIMITIVETYPE PrimitiveType, INT BaseVertexIndex, UINT MinVertexIndex, UINT NumVertices, UINT startIndex, UINT primCount);
            typedef HRESULT(DrawPrimitiveUP_t)(D3DPRIMITIVETYPE PrimitiveType, UINT PrimitiveCount, CONST void* pVertexStreamZeroData, UINT VertexStreamZeroStride);
            typedef HRESULT(DrawIndexedPrimitiveUP_t)(D3DPRIMITIVETYPE PrimitiveType, UINT MinVertexIndex, UINT NumVertices, UINT PrimitiveCount, CONST void* pIndexData, D3DFORMAT IndexDataFormat, CONST void* pVertexStreamZeroData, UINT VertexStreamZeroStride);
            typedef HRESULT(ProcessVertices_t)(UINT SrcStartIndex, UINT DestIndex, UINT VertexCount, IDirect3DVertexBuffer9* pDestBuffer, IDirect3DVertexDeclaration9* pVertexDecl, DWORD Flags);
            typedef HRESULT(CreateVertexDeclaration_t)(CONST D3DVERTEXELEMENT9* pVertexElements, IDirect3DVertexDeclaration9** ppDecl);
            typedef HRESULT(SetVertexDeclaration_t)(IDirect3DVertexDeclaration9* pDecl);
            typedef HRESULT(GetVertexDeclaration_t)(IDirect3DVertexDeclaration9** ppDecl);
            typedef HRESULT(SetFVF_t)(DWORD FVF);
            typedef HRESULT(GetFVF_t)(DWORD* pFVF);
            typedef HRESULT(CreateVertexShader_t)(CONST DWORD* pFunction, IDirect3DVertexShader9** ppShader);
            typedef HRESULT(SetVertexShader_t)(IDirect3DVertexShader9* pShader);
            typedef HRESULT(GetVertexShader_t)(IDirect3DVertexShader9** ppShader);
            typedef HRESULT(SetVertexShaderConstantF_t)(UINT StartRegister, CONST float* pConstantData, UINT Vector4fCount);
            typedef HRESULT(GetVertexShaderConstantF_t)(UINT StartRegister, float* pConstantData, UINT Vector4fCount);
            typedef HRESULT(SetVertexShaderConstantI_t)(UINT StartRegister, CONST int* pConstantData, UINT Vector4iCount);
            typedef HRESULT(GetVertexShaderConstantI_t)(UINT StartRegister, int* pConstantData, UINT Vector4iCount);
            typedef HRESULT(SetVertexShaderConstantB_t)(UINT StartRegister, CONST BOOL* pConstantData, UINT BoolCount);
            typedef HRESULT(GetVertexShaderConstantB_t)(UINT StartRegister, BOOL* pConstantData, UINT BoolCount);
            typedef HRESULT(SetStreamSource_t)(UINT StreamNumber, IDirect3DVertexBuffer9* pStreamData, UINT OffsetInBytes, UINT Stride);
            typedef HRESULT(GetStreamSource_t)(UINT StreamNumber, IDirect3DVertexBuffer9** ppStreamData, UINT* pOffsetInBytes, UINT* pStride);
            typedef HRESULT(SetStreamSourceFreq_t)(UINT StreamNumber, UINT Setting);
            typedef HRESULT(GetStreamSourceFreq_t)(UINT StreamNumber, UINT* pSetting);
            typedef HRESULT(SetIndices_t)(IDirect3DIndexBuffer9* pIndexData);
            typedef HRESULT(GetIndices_t)(IDirect3DIndexBuffer9** ppIndexData);
            typedef HRESULT(CreatePixelShader_t)(CONST DWORD* pFunction, IDirect3DPixelShader9** ppShader);
            typedef HRESULT(SetPixelShader_t)(IDirect3DPixelShader9* pShader);
            typedef HRESULT(GetPixelShader_t)(IDirect3DPixelShader9** ppShader);
            typedef HRESULT(SetPixelShaderConstantF_t)(UINT StartRegister, CONST float* pConstantData, UINT Vector4fCount);
            typedef HRESULT(GetPixelShaderConstantF_t)(UINT StartRegister, float* pConstantData, UINT Vector4fCount);
            typedef HRESULT(SetPixelShaderConstantI_t)(UINT StartRegister, CONST int* pConstantData, UINT Vector4iCount);
            typedef HRESULT(GetPixelShaderConstantI_t)(UINT StartRegister, int* pConstantData, UINT Vector4iCount);
            typedef HRESULT(SetPixelShaderConstantB_t)(UINT StartRegister, CONST BOOL* pConstantData, UINT BoolCount);
            typedef HRESULT(GetPixelShaderConstantB_t)(UINT StartRegister, BOOL* pConstantData, UINT BoolCount);
            typedef HRESULT(DrawRectPatch_t)(UINT Handle, CONST float* pNumSegs, CONST D3DRECTPATCH_INFO* pRectPatchInfo);
            typedef HRESULT(DrawTriPatch_t)(UINT Handle, CONST float* pNumSegs, CONST D3DTRIPATCH_INFO* pTriPatchInfo);
            typedef HRESULT(DeletePatch_t)(UINT Handle);
            typedef HRESULT(CreateQuery_t)(D3DQUERYTYPE Type, IDirect3DQuery9** ppQuery);
            typedef HRESULT(SetConvolutionMonoKernel_t)(UINT width, UINT height, float* rows, float* columns);
            typedef HRESULT(ComposeRects_t)(IDirect3DSurface9* pSrc, IDirect3DSurface9* pDst, IDirect3DVertexBuffer9* pSrcRectDescs, UINT NumRects, IDirect3DVertexBuffer9* pDstRectDescs, D3DCOMPOSERECTSOP Operation, int Xoffset, int Yoffset);
            typedef HRESULT(PresentEx_t)(CONST RECT* pSourceRect, CONST RECT* pDestRect, HWND hDestWindowOverride, CONST RGNDATA* pDirtyRegion, DWORD dwFlags);
            typedef HRESULT(GetGPUThreadPriority_t)(INT* pPriority);
            typedef HRESULT(SetGPUThreadPriority_t)(INT Priority);
            typedef HRESULT(WaitForVBlank_t)(UINT iSwapChain);
            typedef HRESULT(CheckResourceResidency_t)(IDirect3DResource9** pResourceArray, UINT32 NumResources);
            typedef HRESULT(SetMaximumFrameLatency_t)(UINT MaxLatency);
            typedef HRESULT(GetMaximumFrameLatency_t)(UINT* pMaxLatency);
            typedef HRESULT(CheckDeviceState_t)(HWND hDestinationWindow);
            typedef HRESULT(CreateRenderTargetEx_t)(UINT Width, UINT Height, D3DFORMAT Format, D3DMULTISAMPLE_TYPE MultiSample, DWORD MultisampleQuality, BOOL Lockable, IDirect3DSurface9** ppSurface, HANDLE* pSharedHandle, DWORD Usage);
            typedef HRESULT(CreateOffscreenPlainSurfaceEx_t)(UINT Width, UINT Height, D3DFORMAT Format, D3DPOOL Pool, IDirect3DSurface9** ppSurface, HANDLE* pSharedHandle, DWORD Usage);
            typedef HRESULT(CreateDepthStencilSurfaceEx_t)(UINT Width, UINT Height, D3DFORMAT Format, D3DMULTISAMPLE_TYPE MultiSample, DWORD MultisampleQuality, BOOL Discard, IDirect3DSurface9** ppSurface, HANDLE* pSharedHandle, DWORD Usage);
            typedef HRESULT(ResetEx_t)(D3DPRESENT_PARAMETERS* pPresentationParameters, D3DDISPLAYMODEEX* pFullscreenDisplayMode);
            typedef HRESULT(GetDisplayModeEx_t)(UINT iSwapChain, D3DDISPLAYMODEEX* pMode, D3DDISPLAYROTATION* pRotation);
        }

        struct ProxyD3D9FunctionAddresses {
            d3d9_types::QueryInterface_t* QueryInterface = nullptr;
            d3d9_types::AddRef_t* AddRef = nullptr;
            d3d9_types::Release_t* Release = nullptr;
            d3d9_types::TestCooperativeLevel_t* TestCooperativeLevel = nullptr;
            d3d9_types::GetAvailableTextureMem_t* GetAvailableTextureMem = nullptr;
            d3d9_types::EvictManagedResources_t* EvictManagedResources = nullptr;
            d3d9_types::GetDirect3D_t* GetDirect3D = nullptr;
            d3d9_types::GetDeviceCaps_t* GetDeviceCaps = nullptr;
            d3d9_types::GetDisplayMode_t* GetDisplayMode = nullptr;
            d3d9_types::GetCreationParameters_t* GetCreationParameters = nullptr;
            d3d9_types::SetCursorProperties_t* SetCursorProperties = nullptr;
            d3d9_types::SetCursorPosition_t* SetCursorPosition = nullptr;
            d3d9_types::ShowCursor_t* ShowCursor = nullptr;
            d3d9_types::CreateAdditionalSwapChain_t* CreateAdditionalSwapChain = nullptr;
            d3d9_types::GetSwapChain_t* GetSwapChain = nullptr;
            d3d9_types::GetNumberOfSwapChains_t* GetNumberOfSwapChains = nullptr;
            d3d9_types::Reset_t* Reset = nullptr;
            d3d9_types::Present_t* Present = nullptr;
            d3d9_types::GetBackBuffer_t* GetBackBuffer = nullptr;
            d3d9_types::GetRasterStatus_t* GetRasterStatus = nullptr;
            d3d9_types::SetDialogBoxMode_t* SetDialogBoxMode = nullptr;
            d3d9_types::SetGammaRamp_t* SetGammaRamp = nullptr;
            d3d9_types::GetGammaRamp_t* GetGammaRamp = nullptr;
            d3d9_types::CreateTexture_t* CreateTexture = nullptr;
            d3d9_types::CreateVolumeTexture_t* CreateVolumeTexture = nullptr;
            d3d9_types::CreateCubeTexture_t* CreateCubeTexture = nullptr;
            d3d9_types::CreateVertexBuffer_t* CreateVertexBuffer = nullptr;
            d3d9_types::CreateIndexBuffer_t* CreateIndexBuffer = nullptr;
            d3d9_types::CreateRenderTarget_t* CreateRenderTarget = nullptr;
            d3d9_types::CreateDepthStencilSurface_t* CreateDepthStencilSurface = nullptr;
            d3d9_types::UpdateSurface_t* UpdateSurface = nullptr;
            d3d9_types::UpdateTexture_t* UpdateTexture = nullptr;
            d3d9_types::GetRenderTargetData_t* GetRenderTargetData = nullptr;
            d3d9_types::GetFrontBufferData_t* GetFrontBufferData = nullptr;
            d3d9_types::StretchRect_t* StretchRect = nullptr;
            d3d9_types::ColorFill_t* ColorFill = nullptr;
            d3d9_types::CreateOffscreenPlainSurface_t* CreateOffscreenPlainSurface = nullptr;
            d3d9_types::SetRenderTarget_t* SetRenderTarget = nullptr;
            d3d9_types::GetRenderTarget_t* GetRenderTarget = nullptr;
            d3d9_types::SetDepthStencilSurface_t* SetDepthStencilSurface = nullptr;
            d3d9_types::GetDepthStencilSurface_t* GetDepthStencilSurface = nullptr;
            d3d9_types::BeginScene_t* BeginScene = nullptr;
            d3d9_types::EndScene_t* EndScene = nullptr;
            d3d9_types::Clear_t* Clear = nullptr;
            d3d9_types::SetTransform_t* SetTransform = nullptr;
            d3d9_types::GetTransform_t* GetTransform = nullptr;
            d3d9_types::MultiplyTransform_t* MultiplyTransform = nullptr;
            d3d9_types::SetViewport_t* SetViewport = nullptr;
            d3d9_types::GetViewport_t* GetViewport = nullptr;
            d3d9_types::SetMaterial_t* SetMaterial = nullptr;
            d3d9_types::GetMaterial_t* GetMaterial = nullptr;
            d3d9_types::SetLight_t* SetLight = nullptr;
            d3d9_types::GetLight_t* GetLight = nullptr;
            d3d9_types::LightEnable_t* LightEnable = nullptr;
            d3d9_types::GetLightEnable_t* GetLightEnable = nullptr;
            d3d9_types::SetClipPlane_t* SetClipPlane = nullptr;
            d3d9_types::GetClipPlane_t* GetClipPlane = nullptr;
            d3d9_types::SetRenderState_t* SetRenderState = nullptr;
            d3d9_types::GetRenderState_t* GetRenderState = nullptr;
            d3d9_types::CreateStateBlock_t* CreateStateBlock = nullptr;
            d3d9_types::BeginStateBlock_t* BeginStateBlock = nullptr;
            d3d9_types::EndStateBlock_t* EndStateBlock = nullptr;
            d3d9_types::SetClipStatus_t* SetClipStatus = nullptr;
            d3d9_types::GetClipStatus_t* GetClipStatus = nullptr;
            d3d9_types::GetTexture_t* GetTexture = nullptr;
            d3d9_types::SetTexture_t* SetTexture = nullptr;
            d3d9_types::GetTextureStageState_t* GetTextureStageState = nullptr;
            d3d9_types::SetTextureStageState_t* SetTextureStageState = nullptr;
            d3d9_types::GetSamplerState_t* GetSamplerState = nullptr;
            d3d9_types::SetSamplerState_t* SetSamplerState = nullptr;
            d3d9_types::ValidateDevice_t* ValidateDevice = nullptr;
            d3d9_types::SetPaletteEntries_t* SetPaletteEntries = nullptr;
            d3d9_types::GetPaletteEntries_t* GetPaletteEntries = nullptr;
            d3d9_types::SetCurrentTexturePalette_t* SetCurrentTexturePalette = nullptr;
            d3d9_types::GetCurrentTexturePalette_t* GetCurrentTexturePalette = nullptr;
            d3d9_types::SetScissorRect_t* SetScissorRect = nullptr;
            d3d9_types::GetScissorRect_t* GetScissorRect = nullptr;
            d3d9_types::SetSoftwareVertexProcessing_t* SetSoftwareVertexProcessing = nullptr;
            d3d9_types::GetSoftwareVertexProcessing_t* GetSoftwareVertexProcessing = nullptr;
            d3d9_types::SetNPatchMode_t* SetNPatchMode = nullptr;
            d3d9_types::GetNPatchMode_t* GetNPatchMode = nullptr;
            d3d9_types::DrawPrimitive_t* DrawPrimitive = nullptr;
            d3d9_types::DrawIndexedPrimitive_t* DrawIndexedPrimitive = nullptr;
            d3d9_types::DrawPrimitiveUP_t* DrawPrimitiveUP = nullptr;
            d3d9_types::DrawIndexedPrimitiveUP_t* DrawIndexedPrimitiveUP = nullptr;
            d3d9_types::ProcessVertices_t* ProcessVertices = nullptr;
            d3d9_types::CreateVertexDeclaration_t* CreateVertexDeclaration = nullptr;
            d3d9_types::SetVertexDeclaration_t* SetVertexDeclaration = nullptr;
            d3d9_types::GetVertexDeclaration_t* GetVertexDeclaration = nullptr;
            d3d9_types::SetFVF_t* SetFVF = nullptr;
            d3d9_types::GetFVF_t* GetFVF = nullptr;
            d3d9_types::CreateVertexShader_t* CreateVertexShader = nullptr;
            d3d9_types::SetVertexShader_t* SetVertexShader = nullptr;
            d3d9_types::GetVertexShader_t* GetVertexShader = nullptr;
            d3d9_types::SetVertexShaderConstantF_t* SetVertexShaderConstantF = nullptr;
            d3d9_types::GetVertexShaderConstantF_t* GetVertexShaderConstantF = nullptr;
            d3d9_types::SetVertexShaderConstantI_t* SetVertexShaderConstantI = nullptr;
            d3d9_types::GetVertexShaderConstantI_t* GetVertexShaderConstantI = nullptr;
            d3d9_types::SetVertexShaderConstantB_t* SetVertexShaderConstantB = nullptr;
            d3d9_types::GetVertexShaderConstantB_t* GetVertexShaderConstantB = nullptr;
            d3d9_types::SetStreamSource_t* SetStreamSource = nullptr;
            d3d9_types::GetStreamSource_t* GetStreamSource = nullptr;
            d3d9_types::SetStreamSourceFreq_t* SetStreamSourceFreq = nullptr;
            d3d9_types::GetStreamSourceFreq_t* GetStreamSourceFreq = nullptr;
            d3d9_types::SetIndices_t* SetIndices = nullptr;
            d3d9_types::GetIndices_t* GetIndices = nullptr;
            d3d9_types::CreatePixelShader_t* CreatePixelShader = nullptr;
            d3d9_types::SetPixelShader_t* SetPixelShader = nullptr;
            d3d9_types::GetPixelShader_t* GetPixelShader = nullptr;
            d3d9_types::SetPixelShaderConstantF_t* SetPixelShaderConstantF = nullptr;
            d3d9_types::GetPixelShaderConstantF_t* GetPixelShaderConstantF = nullptr;
            d3d9_types::SetPixelShaderConstantI_t* SetPixelShaderConstantI = nullptr;
            d3d9_types::GetPixelShaderConstantI_t* GetPixelShaderConstantI = nullptr;
            d3d9_types::SetPixelShaderConstantB_t* SetPixelShaderConstantB = nullptr;
            d3d9_types::GetPixelShaderConstantB_t* GetPixelShaderConstantB = nullptr;
            d3d9_types::DrawRectPatch_t* DrawRectPatch = nullptr;
            d3d9_types::DrawTriPatch_t* DrawTriPatch = nullptr;
            d3d9_types::DeletePatch_t* DeletePatch = nullptr;
            d3d9_types::CreateQuery_t* CreateQuery = nullptr;
            d3d9_types::SetConvolutionMonoKernel_t* SetConvolutionMonoKernel = nullptr;
            d3d9_types::ComposeRects_t* ComposeRects = nullptr;
            d3d9_types::PresentEx_t* PresentEx = nullptr;
            d3d9_types::GetGPUThreadPriority_t* GetGPUThreadPriority = nullptr;
            d3d9_types::SetGPUThreadPriority_t* SetGPUThreadPriority = nullptr;
            d3d9_types::WaitForVBlank_t* WaitForVBlank = nullptr;
            d3d9_types::CheckResourceResidency_t* CheckResourceResidency = nullptr;
            d3d9_types::SetMaximumFrameLatency_t* SetMaximumFrameLatency = nullptr;
            d3d9_types::GetMaximumFrameLatency_t* GetMaximumFrameLatency = nullptr;
            d3d9_types::CheckDeviceState_t* CheckDeviceState = nullptr;
            d3d9_types::CreateRenderTargetEx_t* CreateRenderTargetEx = nullptr;
            d3d9_types::CreateOffscreenPlainSurfaceEx_t* CreateOffscreenPlainSurfaceEx = nullptr;
            d3d9_types::CreateDepthStencilSurfaceEx_t* CreateDepthStencilSurfaceEx = nullptr;
            d3d9_types::ResetEx_t* ResetEx = nullptr;
            d3d9_types::GetDisplayModeEx_t* GetDisplayModeEx = nullptr;
        };

        class ProxyDirect3DDevice9 : public IDirect3DDevice9
        {
        public:
            ProxyDirect3DDevice9(IDirect3DDevice9* dev) : dev(dev) { }
            ProxyDirect3DDevice9() { }

            void SetDevice(IDirect3DDevice9* dev) { this->dev = dev; }
            ProxyD3D9FunctionAddresses FunctionAddresses;

            /*** IUnknown methods ***/
            STDMETHOD(QueryInterface)(REFIID riid, void** ppvObj);
            STDMETHOD_(ULONG, AddRef)();
            STDMETHOD_(ULONG, Release)();

            /*** IDirect3DDevice9 methods ***/
            STDMETHOD(TestCooperativeLevel)();
            STDMETHOD_(UINT, GetAvailableTextureMem)();
            STDMETHOD(EvictManagedResources)();
            STDMETHOD(GetDirect3D)(IDirect3D9** ppD3D9);
            STDMETHOD(GetDeviceCaps)(D3DCAPS9* pCaps);
            STDMETHOD(GetDisplayMode)(UINT iSwapChain, D3DDISPLAYMODE* pMode);
            STDMETHOD(GetCreationParameters)(D3DDEVICE_CREATION_PARAMETERS *pParameters);
            STDMETHOD(SetCursorProperties)(UINT XHotSpot, UINT YHotSpot, IDirect3DSurface9* pCursorBitmap);
            STDMETHOD_(void, SetCursorPosition)(int X, int Y, DWORD Flags);
            STDMETHOD_(BOOL, ShowCursor)(BOOL bShow);
            STDMETHOD(CreateAdditionalSwapChain)(D3DPRESENT_PARAMETERS* pPresentationParameters, IDirect3DSwapChain9** pSwapChain);
            STDMETHOD(GetSwapChain)(UINT iSwapChain, IDirect3DSwapChain9** pSwapChain);
            STDMETHOD_(UINT, GetNumberOfSwapChains)();
            STDMETHOD(Reset)(D3DPRESENT_PARAMETERS* pPresentationParameters);
            STDMETHOD(Present)(CONST RECT* pSourceRect, CONST RECT* pDestRect, HWND hDestWindowOverride, CONST RGNDATA* pDirtyRegion);
            STDMETHOD(GetBackBuffer)(UINT iSwapChain, UINT iBackBuffer, D3DBACKBUFFER_TYPE Type, IDirect3DSurface9** ppBackBuffer);
            STDMETHOD(GetRasterStatus)(UINT iSwapChain, D3DRASTER_STATUS* pRasterStatus);
            STDMETHOD(SetDialogBoxMode)(BOOL bEnableDialogs);
            STDMETHOD_(void, SetGammaRamp)(UINT iSwapChain, DWORD Flags, CONST D3DGAMMARAMP* pRamp);
            STDMETHOD_(void, GetGammaRamp)(UINT iSwapChain, D3DGAMMARAMP* pRamp);
            STDMETHOD(CreateTexture)(UINT Width, UINT Height, UINT Levels, DWORD Usage, D3DFORMAT Format, D3DPOOL Pool, IDirect3DTexture9** ppTexture, HANDLE* pSharedHandle);
            STDMETHOD(CreateVolumeTexture)(UINT Width, UINT Height, UINT Depth, UINT Levels, DWORD Usage, D3DFORMAT Format, D3DPOOL Pool, IDirect3DVolumeTexture9** ppVolumeTexture, HANDLE* pSharedHandle);
            STDMETHOD(CreateCubeTexture)(UINT EdgeLength, UINT Levels, DWORD Usage, D3DFORMAT Format, D3DPOOL Pool, IDirect3DCubeTexture9** ppCubeTexture, HANDLE* pSharedHandle);
            STDMETHOD(CreateVertexBuffer)(UINT Length, DWORD Usage, DWORD FVF, D3DPOOL Pool, IDirect3DVertexBuffer9** ppVertexBuffer, HANDLE* pSharedHandle);
            STDMETHOD(CreateIndexBuffer)(UINT Length, DWORD Usage, D3DFORMAT Format, D3DPOOL Pool, IDirect3DIndexBuffer9** ppIndexBuffer, HANDLE* pSharedHandle);
            STDMETHOD(CreateRenderTarget)(UINT Width, UINT Height, D3DFORMAT Format, D3DMULTISAMPLE_TYPE MultiSample, DWORD MultisampleQuality, BOOL Lockable, IDirect3DSurface9** ppSurface, HANDLE* pSharedHandle);
            STDMETHOD(CreateDepthStencilSurface)(UINT Width, UINT Height, D3DFORMAT Format, D3DMULTISAMPLE_TYPE MultiSample, DWORD MultisampleQuality, BOOL Discard, IDirect3DSurface9** ppSurface, HANDLE* pSharedHandle);
            STDMETHOD(UpdateSurface)(IDirect3DSurface9* pSourceSurface, CONST RECT* pSourceRect, IDirect3DSurface9* pDestinationSurface, CONST POINT* pDestPoint);
            STDMETHOD(UpdateTexture)(IDirect3DBaseTexture9* pSourceTexture, IDirect3DBaseTexture9* pDestinationTexture);
            STDMETHOD(GetRenderTargetData)(IDirect3DSurface9* pRenderTarget, IDirect3DSurface9* pDestSurface);
            STDMETHOD(GetFrontBufferData)(UINT iSwapChain, IDirect3DSurface9* pDestSurface);
            STDMETHOD(StretchRect)(IDirect3DSurface9* pSourceSurface, CONST RECT* pSourceRect, IDirect3DSurface9* pDestSurface, CONST RECT* pDestRect, D3DTEXTUREFILTERTYPE Filter);
            STDMETHOD(ColorFill)(IDirect3DSurface9* pSurface, CONST RECT* pRect, D3DCOLOR color);
            STDMETHOD(CreateOffscreenPlainSurface)(UINT Width, UINT Height, D3DFORMAT Format, D3DPOOL Pool, IDirect3DSurface9** ppSurface, HANDLE* pSharedHandle);
            STDMETHOD(SetRenderTarget)(DWORD RenderTargetIndex, IDirect3DSurface9* pRenderTarget);
            STDMETHOD(GetRenderTarget)(DWORD RenderTargetIndex, IDirect3DSurface9** ppRenderTarget);
            STDMETHOD(SetDepthStencilSurface)(IDirect3DSurface9* pNewZStencil);
            STDMETHOD(GetDepthStencilSurface)(IDirect3DSurface9** ppZStencilSurface);
            STDMETHOD(BeginScene)();
            STDMETHOD(EndScene)();
            STDMETHOD(Clear)(DWORD Count, CONST D3DRECT* pRects, DWORD Flags, D3DCOLOR Color, float Z, DWORD Stencil);
            STDMETHOD(SetTransform)(D3DTRANSFORMSTATETYPE State, CONST D3DMATRIX* pMatrix);
            STDMETHOD(GetTransform)(D3DTRANSFORMSTATETYPE State, D3DMATRIX* pMatrix);
            STDMETHOD(MultiplyTransform)(D3DTRANSFORMSTATETYPE State, CONST D3DMATRIX* pMatrix);
            STDMETHOD(SetViewport)(CONST D3DVIEWPORT9* pViewport);
            STDMETHOD(GetViewport)(D3DVIEWPORT9* pViewport);
            STDMETHOD(SetMaterial)(CONST D3DMATERIAL9* pMaterial);
            STDMETHOD(GetMaterial)(D3DMATERIAL9* pMaterial);
            STDMETHOD(SetLight)(DWORD Index, CONST D3DLIGHT9* pLight);
            STDMETHOD(GetLight)(DWORD Index, D3DLIGHT9* pLight);
            STDMETHOD(LightEnable)(DWORD Index, BOOL Enable);
            STDMETHOD(GetLightEnable)(DWORD Index, BOOL* pEnable);
            STDMETHOD(SetClipPlane)(DWORD Index, CONST float* pPlane);
            STDMETHOD(GetClipPlane)(DWORD Index, float* pPlane);
            STDMETHOD(SetRenderState)(D3DRENDERSTATETYPE State, DWORD Value);
            STDMETHOD(GetRenderState)(D3DRENDERSTATETYPE State, DWORD* pValue);
            STDMETHOD(CreateStateBlock)(D3DSTATEBLOCKTYPE Type, IDirect3DStateBlock9** ppSB);
            STDMETHOD(BeginStateBlock)();
            STDMETHOD(EndStateBlock)(IDirect3DStateBlock9** ppSB);
            STDMETHOD(SetClipStatus)(CONST D3DCLIPSTATUS9* pClipStatus);
            STDMETHOD(GetClipStatus)(D3DCLIPSTATUS9* pClipStatus);
            STDMETHOD(GetTexture)(DWORD Stage, IDirect3DBaseTexture9** ppTexture);
            STDMETHOD(SetTexture)(DWORD Stage, IDirect3DBaseTexture9* pTexture);
            STDMETHOD(GetTextureStageState)(DWORD Stage, D3DTEXTURESTAGESTATETYPE Type, DWORD* pValue);
            STDMETHOD(SetTextureStageState)(DWORD Stage, D3DTEXTURESTAGESTATETYPE Type, DWORD Value);
            STDMETHOD(GetSamplerState)(DWORD Sampler, D3DSAMPLERSTATETYPE Type, DWORD* pValue);
            STDMETHOD(SetSamplerState)(DWORD Sampler, D3DSAMPLERSTATETYPE Type, DWORD Value);
            STDMETHOD(ValidateDevice)(DWORD* pNumPasses);
            STDMETHOD(SetPaletteEntries)(UINT PaletteNumber, CONST PALETTEENTRY* pEntries);
            STDMETHOD(GetPaletteEntries)(UINT PaletteNumber, PALETTEENTRY* pEntries);
            STDMETHOD(SetCurrentTexturePalette)(UINT PaletteNumber);
            STDMETHOD(GetCurrentTexturePalette)(UINT *PaletteNumber);
            STDMETHOD(SetScissorRect)(CONST RECT* pRect);
            STDMETHOD(GetScissorRect)(RECT* pRect);
            STDMETHOD(SetSoftwareVertexProcessing)(BOOL bSoftware);
            STDMETHOD_(BOOL, GetSoftwareVertexProcessing)();
            STDMETHOD(SetNPatchMode)(float nSegments);
            STDMETHOD_(float, GetNPatchMode)();
            STDMETHOD(DrawPrimitive)(D3DPRIMITIVETYPE PrimitiveType, UINT StartVertex, UINT PrimitiveCount);
            STDMETHOD(DrawIndexedPrimitive)(D3DPRIMITIVETYPE PrimitiveType, INT BaseVertexIndex, UINT MinVertexIndex, UINT NumVertices, UINT startIndex, UINT primCount);
            STDMETHOD(DrawPrimitiveUP)(D3DPRIMITIVETYPE PrimitiveType, UINT PrimitiveCount, CONST void* pVertexStreamZeroData, UINT VertexStreamZeroStride);
            STDMETHOD(DrawIndexedPrimitiveUP)(D3DPRIMITIVETYPE PrimitiveType, UINT MinVertexIndex, UINT NumVertices, UINT PrimitiveCount, CONST void* pIndexData, D3DFORMAT IndexDataFormat, CONST void* pVertexStreamZeroData, UINT VertexStreamZeroStride);
            STDMETHOD(ProcessVertices)(UINT SrcStartIndex, UINT DestIndex, UINT VertexCount, IDirect3DVertexBuffer9* pDestBuffer, IDirect3DVertexDeclaration9* pVertexDecl, DWORD Flags);
            STDMETHOD(CreateVertexDeclaration)(CONST D3DVERTEXELEMENT9* pVertexElements, IDirect3DVertexDeclaration9** ppDecl);
            STDMETHOD(SetVertexDeclaration)(IDirect3DVertexDeclaration9* pDecl);
            STDMETHOD(GetVertexDeclaration)(IDirect3DVertexDeclaration9** ppDecl);
            STDMETHOD(SetFVF)(DWORD FVF);
            STDMETHOD(GetFVF)(DWORD* pFVF);
            STDMETHOD(CreateVertexShader)(CONST DWORD* pFunction, IDirect3DVertexShader9** ppShader);
            STDMETHOD(SetVertexShader)(IDirect3DVertexShader9* pShader);
            STDMETHOD(GetVertexShader)(IDirect3DVertexShader9** ppShader);
            STDMETHOD(SetVertexShaderConstantF)(UINT StartRegister, CONST float* pConstantData, UINT Vector4fCount);
            STDMETHOD(GetVertexShaderConstantF)(UINT StartRegister, float* pConstantData, UINT Vector4fCount);
            STDMETHOD(SetVertexShaderConstantI)(UINT StartRegister, CONST int* pConstantData, UINT Vector4iCount);
            STDMETHOD(GetVertexShaderConstantI)(UINT StartRegister, int* pConstantData, UINT Vector4iCount);
            STDMETHOD(SetVertexShaderConstantB)(UINT StartRegister, CONST BOOL* pConstantData, UINT BoolCount);
            STDMETHOD(GetVertexShaderConstantB)(UINT StartRegister, BOOL* pConstantData, UINT BoolCount);
            STDMETHOD(SetStreamSource)(UINT StreamNumber, IDirect3DVertexBuffer9* pStreamData, UINT OffsetInBytes, UINT Stride);
            STDMETHOD(GetStreamSource)(UINT StreamNumber, IDirect3DVertexBuffer9** ppStreamData, UINT* pOffsetInBytes, UINT* pStride);
            STDMETHOD(SetStreamSourceFreq)(UINT StreamNumber, UINT Setting);
            STDMETHOD(GetStreamSourceFreq)(UINT StreamNumber, UINT* pSetting);
            STDMETHOD(SetIndices)(IDirect3DIndexBuffer9* pIndexData);
            STDMETHOD(GetIndices)(IDirect3DIndexBuffer9** ppIndexData);
            STDMETHOD(CreatePixelShader)(CONST DWORD* pFunction, IDirect3DPixelShader9** ppShader);
            STDMETHOD(SetPixelShader)(IDirect3DPixelShader9* pShader);
            STDMETHOD(GetPixelShader)(IDirect3DPixelShader9** ppShader);
            STDMETHOD(SetPixelShaderConstantF)(UINT StartRegister, CONST float* pConstantData, UINT Vector4fCount);
            STDMETHOD(GetPixelShaderConstantF)(UINT StartRegister, float* pConstantData, UINT Vector4fCount);
            STDMETHOD(SetPixelShaderConstantI)(UINT StartRegister, CONST int* pConstantData, UINT Vector4iCount);
            STDMETHOD(GetPixelShaderConstantI)(UINT StartRegister, int* pConstantData, UINT Vector4iCount);
            STDMETHOD(SetPixelShaderConstantB)(UINT StartRegister, CONST BOOL* pConstantData, UINT BoolCount);
            STDMETHOD(GetPixelShaderConstantB)(UINT StartRegister, BOOL* pConstantData, UINT BoolCount);
            STDMETHOD(DrawRectPatch)(UINT Handle, CONST float* pNumSegs, CONST D3DRECTPATCH_INFO* pRectPatchInfo);
            STDMETHOD(DrawTriPatch)(UINT Handle, CONST float* pNumSegs, CONST D3DTRIPATCH_INFO* pTriPatchInfo);
            STDMETHOD(DeletePatch)(UINT Handle);
            STDMETHOD(CreateQuery)(D3DQUERYTYPE Type, IDirect3DQuery9** ppQuery);

        private:
            IDirect3DDevice9* dev;
        };

        class ProxyDirect3DDevice9Ex : public IDirect3DDevice9Ex
        {
        public:
            ProxyDirect3DDevice9Ex(IDirect3DDevice9Ex* dev) : dev(dev) { }
            ProxyDirect3DDevice9Ex() { }

            void SetDevice(IDirect3DDevice9Ex* dev) { this->dev = dev; }
            ProxyD3D9FunctionAddresses FunctionAddresses;

            /*** IUnknown methods ***/
            STDMETHOD(QueryInterface)(REFIID riid, void** ppvObj);
            STDMETHOD_(ULONG, AddRef)();
            STDMETHOD_(ULONG, Release)();

            /*** IDirect3DDevice9 methods ***/
            STDMETHOD(TestCooperativeLevel)();
            STDMETHOD_(UINT, GetAvailableTextureMem)();
            STDMETHOD(EvictManagedResources)();
            STDMETHOD(GetDirect3D)(IDirect3D9** ppD3D9);
            STDMETHOD(GetDeviceCaps)(D3DCAPS9* pCaps);
            STDMETHOD(GetDisplayMode)(UINT iSwapChain, D3DDISPLAYMODE* pMode);
            STDMETHOD(GetCreationParameters)(D3DDEVICE_CREATION_PARAMETERS *pParameters);
            STDMETHOD(SetCursorProperties)(UINT XHotSpot, UINT YHotSpot, IDirect3DSurface9* pCursorBitmap);
            STDMETHOD_(void, SetCursorPosition)(int X, int Y, DWORD Flags);
            STDMETHOD_(BOOL, ShowCursor)(BOOL bShow);
            STDMETHOD(CreateAdditionalSwapChain)(D3DPRESENT_PARAMETERS* pPresentationParameters, IDirect3DSwapChain9** pSwapChain);
            STDMETHOD(GetSwapChain)(UINT iSwapChain, IDirect3DSwapChain9** pSwapChain);
            STDMETHOD_(UINT, GetNumberOfSwapChains)();
            STDMETHOD(Reset)(D3DPRESENT_PARAMETERS* pPresentationParameters);
            STDMETHOD(Present)(CONST RECT* pSourceRect, CONST RECT* pDestRect, HWND hDestWindowOverride, CONST RGNDATA* pDirtyRegion);
            STDMETHOD(GetBackBuffer)(UINT iSwapChain, UINT iBackBuffer, D3DBACKBUFFER_TYPE Type, IDirect3DSurface9** ppBackBuffer);
            STDMETHOD(GetRasterStatus)(UINT iSwapChain, D3DRASTER_STATUS* pRasterStatus);
            STDMETHOD(SetDialogBoxMode)(BOOL bEnableDialogs);
            STDMETHOD_(void, SetGammaRamp)(UINT iSwapChain, DWORD Flags, CONST D3DGAMMARAMP* pRamp);
            STDMETHOD_(void, GetGammaRamp)(UINT iSwapChain, D3DGAMMARAMP* pRamp);
            STDMETHOD(CreateTexture)(UINT Width, UINT Height, UINT Levels, DWORD Usage, D3DFORMAT Format, D3DPOOL Pool, IDirect3DTexture9** ppTexture, HANDLE* pSharedHandle);
            STDMETHOD(CreateVolumeTexture)(UINT Width, UINT Height, UINT Depth, UINT Levels, DWORD Usage, D3DFORMAT Format, D3DPOOL Pool, IDirect3DVolumeTexture9** ppVolumeTexture, HANDLE* pSharedHandle);
            STDMETHOD(CreateCubeTexture)(UINT EdgeLength, UINT Levels, DWORD Usage, D3DFORMAT Format, D3DPOOL Pool, IDirect3DCubeTexture9** ppCubeTexture, HANDLE* pSharedHandle);
            STDMETHOD(CreateVertexBuffer)(UINT Length, DWORD Usage, DWORD FVF, D3DPOOL Pool, IDirect3DVertexBuffer9** ppVertexBuffer, HANDLE* pSharedHandle);
            STDMETHOD(CreateIndexBuffer)(UINT Length, DWORD Usage, D3DFORMAT Format, D3DPOOL Pool, IDirect3DIndexBuffer9** ppIndexBuffer, HANDLE* pSharedHandle);
            STDMETHOD(CreateRenderTarget)(UINT Width, UINT Height, D3DFORMAT Format, D3DMULTISAMPLE_TYPE MultiSample, DWORD MultisampleQuality, BOOL Lockable, IDirect3DSurface9** ppSurface, HANDLE* pSharedHandle);
            STDMETHOD(CreateDepthStencilSurface)(UINT Width, UINT Height, D3DFORMAT Format, D3DMULTISAMPLE_TYPE MultiSample, DWORD MultisampleQuality, BOOL Discard, IDirect3DSurface9** ppSurface, HANDLE* pSharedHandle);
            STDMETHOD(UpdateSurface)(IDirect3DSurface9* pSourceSurface, CONST RECT* pSourceRect, IDirect3DSurface9* pDestinationSurface, CONST POINT* pDestPoint);
            STDMETHOD(UpdateTexture)(IDirect3DBaseTexture9* pSourceTexture, IDirect3DBaseTexture9* pDestinationTexture);
            STDMETHOD(GetRenderTargetData)(IDirect3DSurface9* pRenderTarget, IDirect3DSurface9* pDestSurface);
            STDMETHOD(GetFrontBufferData)(UINT iSwapChain, IDirect3DSurface9* pDestSurface);
            STDMETHOD(StretchRect)(IDirect3DSurface9* pSourceSurface, CONST RECT* pSourceRect, IDirect3DSurface9* pDestSurface, CONST RECT* pDestRect, D3DTEXTUREFILTERTYPE Filter);
            STDMETHOD(ColorFill)(IDirect3DSurface9* pSurface, CONST RECT* pRect, D3DCOLOR color);
            STDMETHOD(CreateOffscreenPlainSurface)(UINT Width, UINT Height, D3DFORMAT Format, D3DPOOL Pool, IDirect3DSurface9** ppSurface, HANDLE* pSharedHandle);
            STDMETHOD(SetRenderTarget)(DWORD RenderTargetIndex, IDirect3DSurface9* pRenderTarget);
            STDMETHOD(GetRenderTarget)(DWORD RenderTargetIndex, IDirect3DSurface9** ppRenderTarget);
            STDMETHOD(SetDepthStencilSurface)(IDirect3DSurface9* pNewZStencil);
            STDMETHOD(GetDepthStencilSurface)(IDirect3DSurface9** ppZStencilSurface);
            STDMETHOD(BeginScene)();
            STDMETHOD(EndScene)();
            STDMETHOD(Clear)(DWORD Count, CONST D3DRECT* pRects, DWORD Flags, D3DCOLOR Color, float Z, DWORD Stencil);
            STDMETHOD(SetTransform)(D3DTRANSFORMSTATETYPE State, CONST D3DMATRIX* pMatrix);
            STDMETHOD(GetTransform)(D3DTRANSFORMSTATETYPE State, D3DMATRIX* pMatrix);
            STDMETHOD(MultiplyTransform)(D3DTRANSFORMSTATETYPE State, CONST D3DMATRIX* pMatrix);
            STDMETHOD(SetViewport)(CONST D3DVIEWPORT9* pViewport);
            STDMETHOD(GetViewport)(D3DVIEWPORT9* pViewport);
            STDMETHOD(SetMaterial)(CONST D3DMATERIAL9* pMaterial);
            STDMETHOD(GetMaterial)(D3DMATERIAL9* pMaterial);
            STDMETHOD(SetLight)(DWORD Index, CONST D3DLIGHT9* pLight);
            STDMETHOD(GetLight)(DWORD Index, D3DLIGHT9* pLight);
            STDMETHOD(LightEnable)(DWORD Index, BOOL Enable);
            STDMETHOD(GetLightEnable)(DWORD Index, BOOL* pEnable);
            STDMETHOD(SetClipPlane)(DWORD Index, CONST float* pPlane);
            STDMETHOD(GetClipPlane)(DWORD Index, float* pPlane);
            STDMETHOD(SetRenderState)(D3DRENDERSTATETYPE State, DWORD Value);
            STDMETHOD(GetRenderState)(D3DRENDERSTATETYPE State, DWORD* pValue);
            STDMETHOD(CreateStateBlock)(D3DSTATEBLOCKTYPE Type, IDirect3DStateBlock9** ppSB);
            STDMETHOD(BeginStateBlock)();
            STDMETHOD(EndStateBlock)(IDirect3DStateBlock9** ppSB);
            STDMETHOD(SetClipStatus)(CONST D3DCLIPSTATUS9* pClipStatus);
            STDMETHOD(GetClipStatus)(D3DCLIPSTATUS9* pClipStatus);
            STDMETHOD(GetTexture)(DWORD Stage, IDirect3DBaseTexture9** ppTexture);
            STDMETHOD(SetTexture)(DWORD Stage, IDirect3DBaseTexture9* pTexture);
            STDMETHOD(GetTextureStageState)(DWORD Stage, D3DTEXTURESTAGESTATETYPE Type, DWORD* pValue);
            STDMETHOD(SetTextureStageState)(DWORD Stage, D3DTEXTURESTAGESTATETYPE Type, DWORD Value);
            STDMETHOD(GetSamplerState)(DWORD Sampler, D3DSAMPLERSTATETYPE Type, DWORD* pValue);
            STDMETHOD(SetSamplerState)(DWORD Sampler, D3DSAMPLERSTATETYPE Type, DWORD Value);
            STDMETHOD(ValidateDevice)(DWORD* pNumPasses);
            STDMETHOD(SetPaletteEntries)(UINT PaletteNumber, CONST PALETTEENTRY* pEntries);
            STDMETHOD(GetPaletteEntries)(UINT PaletteNumber, PALETTEENTRY* pEntries);
            STDMETHOD(SetCurrentTexturePalette)(UINT PaletteNumber);
            STDMETHOD(GetCurrentTexturePalette)(UINT *PaletteNumber);
            STDMETHOD(SetScissorRect)(CONST RECT* pRect);
            STDMETHOD(GetScissorRect)(RECT* pRect);
            STDMETHOD(SetSoftwareVertexProcessing)(BOOL bSoftware);
            STDMETHOD_(BOOL, GetSoftwareVertexProcessing)();
            STDMETHOD(SetNPatchMode)(float nSegments);
            STDMETHOD_(float, GetNPatchMode)();
            STDMETHOD(DrawPrimitive)(D3DPRIMITIVETYPE PrimitiveType, UINT StartVertex, UINT PrimitiveCount);
            STDMETHOD(DrawIndexedPrimitive)(D3DPRIMITIVETYPE PrimitiveType, INT BaseVertexIndex, UINT MinVertexIndex, UINT NumVertices, UINT startIndex, UINT primCount);
            STDMETHOD(DrawPrimitiveUP)(D3DPRIMITIVETYPE PrimitiveType, UINT PrimitiveCount, CONST void* pVertexStreamZeroData, UINT VertexStreamZeroStride);
            STDMETHOD(DrawIndexedPrimitiveUP)(D3DPRIMITIVETYPE PrimitiveType, UINT MinVertexIndex, UINT NumVertices, UINT PrimitiveCount, CONST void* pIndexData, D3DFORMAT IndexDataFormat, CONST void* pVertexStreamZeroData, UINT VertexStreamZeroStride);
            STDMETHOD(ProcessVertices)(UINT SrcStartIndex, UINT DestIndex, UINT VertexCount, IDirect3DVertexBuffer9* pDestBuffer, IDirect3DVertexDeclaration9* pVertexDecl, DWORD Flags);
            STDMETHOD(CreateVertexDeclaration)(CONST D3DVERTEXELEMENT9* pVertexElements, IDirect3DVertexDeclaration9** ppDecl);
            STDMETHOD(SetVertexDeclaration)(IDirect3DVertexDeclaration9* pDecl);
            STDMETHOD(GetVertexDeclaration)(IDirect3DVertexDeclaration9** ppDecl);
            STDMETHOD(SetFVF)(DWORD FVF);
            STDMETHOD(GetFVF)(DWORD* pFVF);
            STDMETHOD(CreateVertexShader)(CONST DWORD* pFunction, IDirect3DVertexShader9** ppShader);
            STDMETHOD(SetVertexShader)(IDirect3DVertexShader9* pShader);
            STDMETHOD(GetVertexShader)(IDirect3DVertexShader9** ppShader);
            STDMETHOD(SetVertexShaderConstantF)(UINT StartRegister, CONST float* pConstantData, UINT Vector4fCount);
            STDMETHOD(GetVertexShaderConstantF)(UINT StartRegister, float* pConstantData, UINT Vector4fCount);
            STDMETHOD(SetVertexShaderConstantI)(UINT StartRegister, CONST int* pConstantData, UINT Vector4iCount);
            STDMETHOD(GetVertexShaderConstantI)(UINT StartRegister, int* pConstantData, UINT Vector4iCount);
            STDMETHOD(SetVertexShaderConstantB)(UINT StartRegister, CONST BOOL* pConstantData, UINT BoolCount);
            STDMETHOD(GetVertexShaderConstantB)(UINT StartRegister, BOOL* pConstantData, UINT BoolCount);
            STDMETHOD(SetStreamSource)(UINT StreamNumber, IDirect3DVertexBuffer9* pStreamData, UINT OffsetInBytes, UINT Stride);
            STDMETHOD(GetStreamSource)(UINT StreamNumber, IDirect3DVertexBuffer9** ppStreamData, UINT* pOffsetInBytes, UINT* pStride);
            STDMETHOD(SetStreamSourceFreq)(UINT StreamNumber, UINT Setting);
            STDMETHOD(GetStreamSourceFreq)(UINT StreamNumber, UINT* pSetting);
            STDMETHOD(SetIndices)(IDirect3DIndexBuffer9* pIndexData);
            STDMETHOD(GetIndices)(IDirect3DIndexBuffer9** ppIndexData);
            STDMETHOD(CreatePixelShader)(CONST DWORD* pFunction, IDirect3DPixelShader9** ppShader);
            STDMETHOD(SetPixelShader)(IDirect3DPixelShader9* pShader);
            STDMETHOD(GetPixelShader)(IDirect3DPixelShader9** ppShader);
            STDMETHOD(SetPixelShaderConstantF)(UINT StartRegister, CONST float* pConstantData, UINT Vector4fCount);
            STDMETHOD(GetPixelShaderConstantF)(UINT StartRegister, float* pConstantData, UINT Vector4fCount);
            STDMETHOD(SetPixelShaderConstantI)(UINT StartRegister, CONST int* pConstantData, UINT Vector4iCount);
            STDMETHOD(GetPixelShaderConstantI)(UINT StartRegister, int* pConstantData, UINT Vector4iCount);
            STDMETHOD(SetPixelShaderConstantB)(UINT StartRegister, CONST BOOL* pConstantData, UINT BoolCount);
            STDMETHOD(GetPixelShaderConstantB)(UINT StartRegister, BOOL* pConstantData, UINT BoolCount);
            STDMETHOD(DrawRectPatch)(UINT Handle, CONST float* pNumSegs, CONST D3DRECTPATCH_INFO* pRectPatchInfo);
            STDMETHOD(DrawTriPatch)(UINT Handle, CONST float* pNumSegs, CONST D3DTRIPATCH_INFO* pTriPatchInfo);
            STDMETHOD(DeletePatch)(UINT Handle);
            STDMETHOD(CreateQuery)(D3DQUERYTYPE Type, IDirect3DQuery9** ppQuery);
            STDMETHOD(SetConvolutionMonoKernel)(UINT width, UINT height, float* rows, float* columns);
            STDMETHOD(ComposeRects)(IDirect3DSurface9* pSrc, IDirect3DSurface9* pDst, IDirect3DVertexBuffer9* pSrcRectDescs, UINT NumRects, IDirect3DVertexBuffer9* pDstRectDescs, D3DCOMPOSERECTSOP Operation, int Xoffset, int Yoffset);
            STDMETHOD(PresentEx)(CONST RECT* pSourceRect, CONST RECT* pDestRect, HWND hDestWindowOverride, CONST RGNDATA* pDirtyRegion, DWORD dwFlags);
            STDMETHOD(GetGPUThreadPriority)(INT* pPriority);
            STDMETHOD(SetGPUThreadPriority)(INT Priority);
            STDMETHOD(WaitForVBlank)(UINT iSwapChain);
            STDMETHOD(CheckResourceResidency)(IDirect3DResource9** pResourceArray, UINT32 NumResources);
            STDMETHOD(SetMaximumFrameLatency)(UINT MaxLatency);
            STDMETHOD(GetMaximumFrameLatency)(UINT* pMaxLatency);
            STDMETHOD(CheckDeviceState)(HWND hDestinationWindow);
            STDMETHOD(CreateRenderTargetEx)(UINT Width, UINT Height, D3DFORMAT Format, D3DMULTISAMPLE_TYPE MultiSample, DWORD MultisampleQuality, BOOL Lockable, IDirect3DSurface9** ppSurface, HANDLE* pSharedHandle, DWORD Usage);
            STDMETHOD(CreateOffscreenPlainSurfaceEx)(UINT Width, UINT Height, D3DFORMAT Format, D3DPOOL Pool, IDirect3DSurface9** ppSurface, HANDLE* pSharedHandle, DWORD Usage);
            STDMETHOD(CreateDepthStencilSurfaceEx)(UINT Width, UINT Height, D3DFORMAT Format, D3DMULTISAMPLE_TYPE MultiSample, DWORD MultisampleQuality, BOOL Discard, IDirect3DSurface9** ppSurface, HANDLE* pSharedHandle, DWORD Usage);
            STDMETHOD(ResetEx)(D3DPRESENT_PARAMETERS* pPresentationParameters, D3DDISPLAYMODEEX* pFullscreenDisplayMode);
            STDMETHOD(GetDisplayModeEx)(UINT iSwapChain, D3DDISPLAYMODEEX* pMode, D3DDISPLAYROTATION* pRotation);

        private:
            IDirect3DDevice9Ex* dev;
        };

    }
}
